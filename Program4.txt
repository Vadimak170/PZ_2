#include <iostream>
#include <stdlib.h>
#include <locale>
#include <ctime>
#include <stdio.h>
#include <time.h>
#include <cstring>
#define Etype int
using namespace std;
int             GT(int & a, int & b)
{
    return a > b;
}
void            INSERTZERO(Etype array[])
{
    return;
}

/*
For partitions of length one, there is nothing to do.
This is the optimal sort for one item.
*/

void            INSERTONE(Etype array[])
{
    return;
}

/*
For partitions of length two, we either reverse it or leave it alone.
This is the optimal sort for two items.
*/
void            SWAP(Etype * a, Etype * b)
{
    Etype           tmp = *a;
    *a = *b;
    *b = tmp;
}
void            INSERTTWO(Etype array[])
{
    if (GT(array[0], array[1]))
        SWAP(&array[0], &array[1]);
    return;
}

/*
Optimal treatment for small partitions of length 3.
This is the optimal sort for three items.
*/
int             LT(Etype a, Etype b)
{
    return a < b;
}
void            INSERTTHREE(Etype array[])
{
    if (LT(array[0], array[1])) {
        if (LT(array[1], array[2]))
            return;
        else if (LT(array[0], array[2]))
            SWAP(&array[1], &array[2]);
        else {
            Etype           Tmp = array[0];
            array[0] = array[2];
            array[2] = array[1];
            array[1] = Tmp;
        }
    } else {
        if (LT(array[0], array[2]))
            SWAP(&array[0], &array[1]);
        else if (LT(array[1], array[2])) {
            Etype           Tmp = array[0];
            array[0] = array[1];
            array[1] = array[2];
            array[2] = Tmp;
        } else
            SWAP(&array[0], &array[2]);
    }
    return;
}

/*
Optimal treatment for small partitions of length 4.
This is the optimal sort for four items.
*/
void            INSERTFOUR(Etype array[])
{
    Etype           temp;
    if (GT(array[0], array[1])) {
        temp = array[0];
        array[0] = array[1];
        array[1] = temp;
    }
    if (GT(array[2], array[3])) {
        temp = array[2];
        array[2] = array[3];
        array[3] = temp;
    }
    if (GT(array[1], array[2])) {
        if (GT(array[0], array[3])) {
            temp = array[0];
            array[0] = array[2];
            array[2] = temp;
            temp = array[1];
            array[1] = array[3];
            array[3] = temp;
        } else {
            temp = array[1];
            array[1] = array[2];
            array[2] = temp;
            if (GT(array[0], array[1])) {
                temp = array[0];
                array[0] = array[1];
                array[1] = temp;
            }
            if (GT(array[2], array[3])) {
                temp = array[2];
                array[2] = array[3];
                array[3] = temp;
            }
        }
    }
}

void LINEARINSERTION(int a[], unsigned long n)
{
    unsigned long   i,
                    j;
    int           tmp;

    for (i = 1; i < n; i++)
        for (j = i; j > 0 && GT(a[j - 1], a[j]); j--) {

            tmp = a[j];
            a[j] = a[j - 1];
            a[j - 1] = tmp;
        }
}
void generator(int* arr, int* arr2,int* arr3,int* arr4, int n)
{
   srand(time(NULL));
   for (int i(0); i<n; i++){
    arr[i]=0+rand()%10;
    arr2[i]=arr[i];
    arr3[i]=arr[i];
    arr4[i]=arr[i];}
   cout << "Данные cгенерированы.\n";
}
void selection(int *ar, int size)
 {
     int i, j, mx, nmx;

     for(i = 0; i < size-1; i++)
       {
         mx=ar[i];
         nmx=i;
         for(j = i+1; j < size; j++)
           {
             if (ar[j]<mx)
                {
                 mx=ar[j];
                 nmx=j;
                 }
           }
          ar[nmx]=ar[i];
          ar[i]=mx;
           }
        cout<<"Массив отсортирован методом выбора.\n";
     }
     void GnomeSort(int *A, int N) {
    int i = 0;
    while(i < N) {
        if(i == 0 || A[i - 1] <= A[i]) ++i;
        else {
            int Temp = A[i];
            A[i] = A[i - 1];
            A[i - 1] = Temp;
            --i;
        }
    }
}
void checksort(int *arr,int n)
{   if (n>9)
    for(int i(0);i<10;i++)
        cout<<arr[i];
}
void    INSERTIONSORT(Etype array[], unsigned long count)
{
    unsigned long   partition;  /* The end of a new partition */
    long            beg;        /* Search beginning here (this moves toward
                                 * ipg) */
    long            ipg;        /* Current guess for the insertion point
                                 * (average of beg+end) */
    long            end;        /* Search ending here (this moves toward ipg) */
    Etype           temp;       /* Hold one elemennt of the array in
                                 * temporary storage */
    /* * One element is sorted by definition. * Form larger and larger
     * ordered partitions * until the entire array is correctly ordered */
    switch (count) {
    case 0:
    case 1:
        return;
    case 2:
        INSERTTWO(array);
        return;
    case 3:
        INSERTTHREE(array);
        return;
    case 4:
        INSERTFOUR(array);
        return;
#ifdef MY_CACHE_IS_ENORMOUS
    case 5:
        InsertFive(array);
        return;
#endif

    default:

/* Seems like a good idea, but it does not really help.
I left this in here so you won't bother with it.  Or if
you do want to try it, you can just remove the comments.

   if (ARRAYISREVERSED(array, 0, count-1)) {
     REVERSEARRAY(array, 0, count-1);
     return;
   }
 */
        for (partition = 1; partition < count; partition++) {
            /* inline binary search to find point of insertion */
            beg = ipg = 0;      /* The first element of the ordered part of
                                 * the array is element 0 */
            end = partition - 1;/* The last element already ordered is
                                 * element partition-1 */

            /* Without this check, loop terminates only if an equal element
             * is already sorted */
            while (end >= beg) {
                /* insertion point guess of halfway between beginning and
                 * ending */
                ipg = ((end + beg) >> 1);       /* BUGBUG: we can't sort sets
                                                 * > (MAX_LONG)/2 elements */
                /* However, this sort should *NEVER* be used for anything but
                 * tiny partitions */

                /* The element sitting at the end of the partition is the one
                 * we will insert */
                /* It is not ordered yet, but all the array to the left of it
                 * is in sort. */
                if (GT(array[ipg], array[partition]))
                    end = ipg - 1;
                else
                    beg = ++ipg;
            }
            /* make room at array[ipg] for array[i] */
            /* It might already be in the right place */
            if (partition != (unsigned long) ipg) {
                temp = array[partition];        /* Save the new element we
                                                 * are ready to insert */
                /* Move the data from the insertion point downward.  We can't
                ** use memcpy()!
                ** For C++, you will have to replace this because memmove
                ** does not fire constructors!  Shell-sort is better anyway.
                */
                memmove(&array[ipg + 1], &array[ipg], (partition - ipg) * sizeof(Etype));
                array[ipg] = temp;      /* Put the new element in its sorted
                                         * order */
            }
        }

    }
    return;
}

int main()
{setlocale(LC_ALL,"Russian");
    int n;
    int sizeC=11;
    cout<<"Введите размер массива:";
       cin>>n;
       int *arr = new int[n];
       int *arr2 = new int[n];
        int *arr3 = new int[n];
       int *arr4 = new int[n];
    generator(arr,arr2,arr3,arr4,n);
    clock_t start = clock();
        selection(arr,n);
    clock_t end = clock();
     double seconds = (double)(end - start) / CLOCKS_PER_SEC;
      printf("Время сортировки выбором: %f seconds\n", seconds);
      clock_t start2 = clock();
      LINEARINSERTION(arr2,n);
       clock_t end2 = clock();
     double seconds2 = (double)(end2 - start2) / CLOCKS_PER_SEC;
      printf("Время сортировки линейными вставками: %f seconds\n", seconds2);
       clock_t start3 = clock();
    GnomeSort(arr3,n);
    clock_t end3 = clock();
     double seconds3 = (double)(end3 - start3) / CLOCKS_PER_SEC;
      printf("Время гномьей сортировки %f seconds\n", seconds3);
       clock_t start4 = clock();
    INSERTIONSORT(arr4,n);
     clock_t end4 = clock();
     double seconds4 = (double)(end4 - start4) / CLOCKS_PER_SEC;
      printf("Время гномьей сортировки %f seconds\n", seconds4);
        delete [] arr;
    return 0;
}
